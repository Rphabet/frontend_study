

function myFunc() {
    // 버튼을 눌렀을때 jQuery.html 파일에서, 헤딩 색깔을 바꿔줄거임.
    // jQuery는
    // 1. 내가 제어하길 원하는 element를 html에서 찾는다.
    // 2. 선택된 element에 대해 method로 호출. (정해져있는 method가 있음)
    // 이게 사실상 jQuery의 끝임
    // jQuery는 어떤 형태로 사용하나요?
    // $로 시작해요!
    // $ 다음에 () 가 바로 나옴! $()  그리고 그 안에 selector라는 특수한 형태의 문자열이 나옴
    // $("<selector>")
    // $("이 selector를 갖고 내가 원하는걸 딱 찝는거야!!!")
    $("h1")     // 이거 태그 셀렉터라고 불림. 무슨 소리야? <h1> 찾으라는거야. 그럼 이 js가 실행이되서 jQuery구문이 실행되면 h1 엘레멘트 찾는거임.
                // <h1> 여기는 h1 입니다. </h1>   이 element를 찾아서 지금 java script로 끌고와. 근데 어떻게 끌고와? 객체로 들고옴.
                // element를 찾아서 JavaScript 영역으로 끌고옴. 이걸 document object(문서 객체)라고 일컫음.
    // 이렇게 가져온 문서 객체를 jQuery 객체로 다시 만듦.
    //  (늘 어떤 객체든, 객체는 안에 뭔가를 많이 갖고 있어. 데이터를 갖고 있고 기능을 갖고 있어. property와 method를 갖고 있음)
    //  jQuery는 메쏘드 객체만 갖고 있음. 그래서 $("<selector>").method() 를 호출하는거임! (e.g. $("h1").remove())

    // 이제 selector 먼저 알아보시죠~
    // selector는 기호로 표현이 되어 그게 좀 까다롭지만, 무조건 숙지하고 있어야함!
    // 1. universal selector (aka 전체 셀렉터) => *    일반적으로 * asterisk 를 사용함.
    // $("*").css('color','red');             // 문자열로 표현함.
                                                                         // 이제 홈페이지 실행을 html 에서 실행시켜보면 쏴악 바뀌는걸 알수있음
    // css 메쏘드는 자주 쓰이는건 아님.
    //  $("*").css('color','red');

    // 2. Tag selector (태그 선택자) => 태그명
    $("li, h1").css('background-color', 'yellow');
    // li 태그 다 찾아! 라는 얘기가 됨 html파일 6개 한꺼번에 다 찾는거임
    // h1 까지 추가하려면 ',' 로 추가해주면 됨.

    // 3. ID selector (아이디 선택자)  [ 하나의 html에서 같은 값이 여러곳에서 나올수가 없음 ]
    //                              ID 선택자 기호는 # 을 써야함.
    // $('#my_animal').text("소리없는 아우성");  // 앞에 있는 애를 찾아서 그 tag사이에 있는 element의 문자를 지금 텍스트로 바꾸란 소리임!
                                                             // 고양이를 소리없는 아우성으로 바꾸면 됨.
    // $('#my_animal').text();       // 이건 태그안에 있는 element를 알아오란 소리임
    //그럼 이거 어떻게 알아봐?
    // alert로 찍으면 됨!
    alert($('#my_animal').text());


   // 4. class selector (클래스 선택자)    기호 어떤거 쓰지? class는 기호 '.'을 씀! 쩜 하나 찍음!
   // $('.my_region').remove();      // 임의로 설정해놓은 class를 제거해보자.
                                         // 실행시켜보니 화면에서 날라감 ㅎㄷㄷ 부산하나만 남음.
                                       // 코드 내용이 변하는건 아님. 화면만 변하는거임

    // 5. 구조 선택자
    //    자식 선택자 => 기호로 '>' 꺽쇠 사용
    //    $('ol > li').css('color','blue');
    // 똑같이 ol > li를 선택해볼거야. 근데 이번엔 자식 선택자 말고 후손 선택자를 사용해서 찾아볼거임
    // 후손 선택자는 자식의 개념을 포함하고 그 밑의 요소들을 모두 포함하는 개념.
    // 후손 선택자는 공백으로 표현.
    //   $('div li').remove();                   // div 후손으로 있는 li   // 고양이 호랑이 강아지 다 날라감!
    // $('ol li').remove();

    // 셀렉터는 진짜 잘 알아둬야함. 데이터 수집할 때 크롤링 할때도 쓰고 등등.. 진짜 직접적인 연관이 있는게 많음. 꼭 알아두자!!!!

    // 6. 동위 선택자 (형제 관계)
    // 사용하는 기호: +   (자신의 바로 뒤에 나오는 형제를 지칭함) e.g. 강아지만 선택하고 싶음
    $('#my_animal + li').text('코알라')     // 아이디가 my_animal인데 걔 바로 뒤에 나오는 li에 적용
    // 사용하는 기호2: ~   (자신의 뒤에 나오는 모든 형제를 지칭함) i.e. +는 뒤에 나오는 형제 하나, ~는 뒤에 나오는 형제 모두
    // $('#my_animal ~ *')     <<<< 이렇게 많이 쓰임. 셀렉터 이용할 땐 명확하게 표현하자!

    // 7. Attribute selector (속성 선택자) ==> 이친구는 대괄호 []를 이용하여 표현한다
    // 속성의 종류 예시: class, type, id, etc..
    // $('[type]').css('color', 'red');     // type 이라는 속성을 갖고 있는 ㅅㄲ 다찾아
    $('[type=button]').css('color', 'red');    // type 이 버튼인것만 찾아라! 이렇게도 할 수 있음.

    // 기본 속성 셀렉터에 대해서 알아봤음.
}
